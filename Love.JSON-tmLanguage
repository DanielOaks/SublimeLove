{
    "comment": "Lua+Love Syntax", 
    "fileTypes": [ "lua" ], 
    "foldingStartMarker": "^\\s*\\b(function|local\\s+function|if|for)\\b|{[ \\t]*$|\\[\\[", 
    "foldingStopMarker": "\\bend\\b|^\\s*}|\\]\\]", 
    "keyEquivalent": "^~L", 
    "name": "Lua (Love)", 
    "patterns": [
        { "include": "#functions" },
        { "include": "#numeric-constant" },
        { "include": "#string-single" },
        { "include": "#string-double" },
        { "include": "#love-pixel-effect" },
        { "include": "#string-multiline" },
        { "include": "#comment-block" },
        { "include": "#comment-line" },
        { "include": "#control-flow" },
        { "include": "#lua-constant" },
        { "include": "#lua-self" },
        { "include": "#lua-support" },
        { "include": "#lua-library" },
        { "include": "#lua-logic" },
        { "include": "#lua-operator" },
        { "include": "#lua-love" }
    ],
    "repository": {
        "functions": {
            "captures": {
                "1": { "name": "keyword.control.lua" }, 
                "2": { "name": "entity.name.function.scope.lua" }, 
                "3": { "name": "entity.name.function.lua" }, 
                "4": { "name": "punctuation.definition.parameters.begin.lua" }, 
                "5": { "name": "variable.parameter.function.lua" }, 
                "6": { "name": "punctuation.definition.parameters.end.lua" }
            }, 
            "match": "\\b(function)\\s+([a-zA-Z_.:]+[.:])?([a-zA-Z_]\\w*)\\s*(\\()([^)]*)(\\))", 
            "name": "meta.function.lua"
        },
        "numeric-constant": {
            "match": "(?<![\\d.])\\s0x[a-fA-F\\d]+|\\b\\d+(\\.\\d+)?([eE]-?\\d+)?|\\.\\d+([eE]-?\\d+)?", 
            "name": "constant.numeric.lua"
        }, 
        "string-single": {
            "begin": "'", 
            "beginCaptures": {
                "0": { "name": "punctuation.definition.string.begin.lua" }
            }, 
            "end": "'", 
            "endCaptures": {
                "0": { "name": "punctuation.definition.string.end.lua" }
            }, 
            "name": "string.quoted.single.lua", 
            "patterns": [
                {
                    "match": "\\\\.", 
                    "name": "constant.character.escape.lua"
                }
            ]
        }, 
        "string-double": {
            "begin": "\"", 
            "beginCaptures": {
                "0": { "name": "punctuation.definition.string.begin.lua" }
            }, 
            "end": "\"", 
            "endCaptures": {
                "0": { "name": "punctuation.definition.string.end.lua" }
            }, 
            "name": "string.quoted.double.lua", 
            "patterns": [
                {
                    "match": "\\\\.", 
                    "name": "constant.character.escape.lua"
                }
            ]
        },
        "string-multiline": {
            "begin": "(?<!--)\\[(=*)\\[", 
            "beginCaptures": {
                "0": { "name": "punctuation.definition.string.begin.lua" }
            }, 
            "end": "\\]\\1\\]", 
            "endCaptures": {
                "0": { "name": "punctuation.definition.string.end.lua" }
            }, 
            "name": "string.quoted.other.multiline.lua"
        }, 
        "comment-block": {
            "begin": "--\\[(=*)\\[", 
            "captures": {
                "0": { "name": "punctuation.definition.comment.lua" }
            }, 
            "end": "\\]\\1\\]", 
            "name": "comment.block.lua"
        }, 
        "comment-line": {
            "captures": {
                "1": { "name": "punctuation.definition.comment.lua" }
            }, 
            "match": "(--)(?!\\[\\[).*$\\n?", 
            "name": "comment.line.double-dash.lua"
        }, 
        "control-flow": {
            "match": "\\b(break|do|else|for|if|elseif|return|then|repeat|while|until|end|function|local|in)\\b", 
            "name": "keyword.control.lua"
        }, 
        "lua-constant": {
            "match": "(?<![^.]\\.|:)\\b(false|nil|true|_G|_VERSION|math\\.(pi|huge))\\b|(?<![.])\\.{3}(?!\\.)", 
            "name": "constant.language.lua"
        }, 
        "lua-self": {
            "match": "(?<![^.]\\.|:)\\b(self)\\b", 
            "name": "variable.language.self.lua"
        }, 
        "lua-support": {
            "match": "(?<![^.]\\.|:)\\b(assert|collectgarbage|dofile|error|getfenv|getmetatable|ipairs|loadfile|loadstring|module|next|pairs|pcall|print|rawequal|rawget|rawset|require|select|setfenv|setmetatable|tonumber|tostring|type|unpack|xpcall)\\b(?=[( {])", 
            "name": "support.function.lua"
        }, 
        "lua-library": {
            "match": "(?<![^.]\\.|:)\\b(coroutine\\.(create|resume|running|status|wrap|yield)|string\\.(byte|char|dump|find|format|gmatch|gsub|len|lower|match|rep|reverse|sub|upper)|table\\.(concat|insert|maxn|remove|sort)|math\\.(abs|acos|asin|atan2?|ceil|cosh?|deg|exp|floor|fmod|frexp|ldexp|log|log10|max|min|modf|pow|rad|random|randomseed|sinh?|sqrt|tanh?)|io\\.(close|flush|input|lines|open|output|popen|read|tmpfile|type|write)|os\\.(clock|date|difftime|execute|exit|getenv|remove|rename|setlocale|time|tmpname)|package\\.(cpath|loaded|loadlib|path|preload|seeall)|debug\\.(debug|[gs]etfenv|[gs]ethook|getinfo|[gs]etlocal|[gs]etmetatable|getregistry|[gs]etupvalue|traceback))\\b(?=[( {])", 
            "name": "support.function.library.lua"
        }, 
        "lua-logic": {
            "match": "\\b(and|or|not)\\b", 
            "name": "keyword.operator.lua"
        }, 
        "lua-operator": {
            "match": "\\+|-|%|#|\\*|\\/|\\^|==?|~=|<=?|>=?|(?<!\\.)\\.{2}(?!\\.)", 
            "name": "keyword.operator.lua"
        }, 
        "lua-love": {
            "match": "",
            "name": "support.function.library.lua.love"
        },
        "love-pixel-effect": {
            "begin": "(love\\.graphics\\.(?:newShader|newPixelEffect))\\(*\\s*(?<!--)(\\[(=*)\\[)",
            "beginCaptures": {
                "1": { "name": "support.function.library.lua.love" },
                "2": { "name": "string.quoted.other.multiline.lua" }
            },
            "end": "(\\]\\])\\)*",
            "endCaptures": {
                "1": { "name": "string.quoted.other.multiline.lua" }
            },
            "patterns": [
                { "include": "source.glsl.love" }
            ],
            "comment": "Love GLSL highlighting on newPixelEffect / newShaderEffect"
        }
    }, 
    "scopeName": "source.lua.love", 
    "uuid": "86a2712f-d1d2-4ab3-8788-b4a6b6215005"
}